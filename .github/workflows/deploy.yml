name: Deploy Lambda Functions

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

jobs:
  deploy-backend:
    name: Deploy to Primary Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./backend/package-lock.json"

      - name: Install dependencies
        run: npm ci --omit=dev

      - name: Clean up unnecessary files
        run: |
          # Remove coverage and test artifacts
          rm -rf node_modules/**/coverage \
          node_modules/**/__tests__ \
          node_modules/**/test \
          node_modules/**/tests \
          node_modules/**/example \
          node_modules/**/.cache

          # Remove esbuild if not needed at runtime
          rm -rf node_modules/esbuild

      - name: Create deployment package
        run: |
          rm -f function.zip 
          mkdir -p lambda-package
          cp -r node_modules lambda-package/
          rsync -av --progress . lambda-package/ --exclude lambda-package --exclude .git --exclude package-lock.json --exclude pipeline --exclude .env.example --exclude .gitignore 
          cd lambda-package
          zip -r ../function.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to Lambda
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://function.zip

  deploy-service-1:
    name: Deploy S3 cleanup to lambda
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/pipeline/S3Cleanup

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./backend/pipeline/S3Cleanup/package-lock.json"

      - name: Install dependencies
        run: npm ci --omit=dev

      - name: Clean up unnecessary files
        run: |
          # Remove coverage and test artifacts
          rm -rf node_modules/**/coverage \
          node_modules/**/__tests__ \
          node_modules/**/test \
          node_modules/**/tests \
          node_modules/**/example \
          node_modules/**/.cache

          # Remove esbuild if not needed at runtime
          rm -rf node_modules/esbuild

      - name: Create deployment package
        run: |
          rm -f function.zip  
          mkdir -p lambda-package
          cp -r node_modules lambda-package/
          rsync -av --progress . lambda-package/ --exclude lambda-package --exclude .git --exclude package-lock.json
          cd lambda-package
          zip -r ../function.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload package to S3 and deploy to Lambda
        run: |
          # Upload the deployment package to S3
          aws s3 cp function.zip s3://${{ secrets.DEP_BUCKET_NAME }}/s3-cleanup/function-${{ github.sha }}.zip

          # Update Lambda function code from S3
          aws lambda update-function-code \
            --function-name ${{ secrets.S3_CLEANUP_LAMBDA_FUNCTION_NAME }} \
            --s3-bucket ${{ secrets.DEP_BUCKET_NAME }} \
            --s3-key s3-cleanup/function-${{ github.sha }}.zip

  deploy-service-2:
    name: Deploy Video Processing to lambda
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/pipeline/VideoProcessing

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./backend/pipeline/VideoProcessing/package-lock.json"

      - name: Install dependencies
        run: npm ci --omit=dev

      - name: Clean up unnecessary files
        run: |
          # Remove coverage and test artifacts
          rm -rf node_modules/**/coverage \
          node_modules/**/__tests__ \
          node_modules/**/test \
          node_modules/**/tests \
          node_modules/**/example \
          node_modules/**/.cache

          # Remove esbuild if not needed at runtime
          rm -rf node_modules/esbuild

      - name: Create deployment package
        run: |
          rm -f function.zip 
          mkdir -p lambda-package
          cp -r node_modules lambda-package/
          rsync -av --progress . lambda-package/ --exclude lambda-package --exclude .git --exclude package-lock.json
          cd lambda-package
          zip -r ../function.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload package to S3 and deploy to Lambda
        run: |
          # Upload the deployment package to S3
          aws s3 cp function.zip s3://${{ secrets.DEP_BUCKET_NAME }}/video-processing/function-${{ github.sha }}.zip

          # Update Lambda function code from S3
          aws lambda update-function-code \
            --function-name ${{ secrets.VIDEO_PROCESSING_LAMBDA_FUNCTION_NAME }} \
            --s3-bucket ${{ secrets.DEP_BUCKET_NAME }} \
            --s3-key video-processing/function-${{ github.sha }}.zip
